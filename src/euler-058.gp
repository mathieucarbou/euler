/*
    For Euler's Problem 58, we can re-use what's done in problem 28.

    We can call i the Nth square, i starting at 0.
    * The south-east diagonal will never generate primes since it generates squares of the form:
        SE(i) = (1+2*i)^2
    * For a given square i, corners which can be primes can be generated by:
        * SW(i) = SE(i)-2*i = 4*i^2+2*i+1   => Polynom [4, 2, 1]
        * NW(i) = SE(i)-4*i = 4*i^2+1       => Polynom [4, 0, 1]
        * NE(i) = SE(i)-6*i = 4*i^2-2*i+1   => Polynom [4, -2, 1]

    For a square i:
    * The total numbers on all diagonals is 4*i+1
    * The length of the square is 2*i+1

    So for each i, we will compute SW(i), NW(i), NE(i) and check if there are primes, to increment a counter.
    We will stop when counter / 4*i+1 < 10%
*/

c=i=0
p=[Pol([4, 2, 1]), Pol([4, 0, 1]), Pol([4, -2, 1])]
until(10*c < 4*i+1, i++; c+=#select(x->isprime(x), apply(p->subst(p,'x,i), p)))
print(2*i+1)

\q
